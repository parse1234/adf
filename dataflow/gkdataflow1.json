{
	"name": "gkdataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "gkemp",
						"type": "DatasetReference"
					},
					"name": "emp"
				},
				{
					"dataset": {
						"referenceName": "gkdept",
						"type": "DatasetReference"
					},
					"name": "dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "gkload1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "renamedid"
				},
				{
					"name": "datachange"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          ename as string,",
				"          salary as integer,",
				"          did as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"source(output(",
				"          dept_id as string,",
				"          dname as string,",
				"          totalrevenue as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dept",
				"emp select(mapColumn(",
				"          empid,",
				"          ename,",
				"          salary,",
				"          dept_id = did",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamedid",
				"renamedid derive(ename = upper(ename),",
				"          salary = salary+(salary*10/100)) ~> datachange",
				"datachange, dept join(renamedid@dept_id == dept@dept_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cid as string,",
				"          cname as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}