{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "batch2dept",
						"type": "DatasetReference"
					},
					"name": "dept"
				},
				{
					"dataset": {
						"referenceName": "batch2emp",
						"type": "DatasetReference"
					},
					"name": "emp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "high",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "low",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "chnagethedept"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          dept_id as integer,",
				"          dname as string,",
				"          totalrevenue as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dept",
				"source(output(",
				"          empid as integer,",
				"          ename as string,",
				"          salary as integer,",
				"          did as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"dept derive(dname = initCap(dname),",
				"          targetrevenue = totalrevenue+(totalrevenue*20/100)) ~> chnagethedept",
				"emp derive(ename = initCap(ename)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          eid = empid,",
				"          ename,",
				"          salary,",
				"          did",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, dept join(did == dept_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          eid,",
				"          ename,",
				"          salary,",
				"          dname",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"chnagethedept split(totalrevenue>=40000,",
				"     disjoint: false) ~> split1@(high, low)",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"split1@high sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          did as integer,",
				"          dname as string,",
				"          revnue as integer,",
				"          targetrev as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          did = dept_id,",
				"          dname,",
				"          revnue = totalrevenue,",
				"          targetrev = targetrevenue",
				"     )) ~> sink2",
				"split1@low sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          did as integer,",
				"          dname as string,",
				"          revnue as integer,",
				"          targetrev as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          did = dept_id,",
				"          dname,",
				"          revnue = totalrevenue,",
				"          targetrev = targetrevenue",
				"     )) ~> sink3"
			]
		}
	}
}